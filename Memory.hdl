// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	//CHIP RAM16K {
    //IN in[16], load, address[14];
    //OUT out[16]; }
	
	//CHIP Screen {
	//IN in[16], load, address[13]
	//OUT out[16]
	//}
	
	//CHIP Keyboard {
	//OUT: out[16]
	//}
	
	//CHIP DMux4Way {
    //IN in, sel[2];
    //OUT a, b, c, d; }
	
	//CHIP Mux4Way16 {
    //IN a[16], b[16], c[16], d[16], sel[2];
    //OUT out[16]; }
	
	// We set either RAMload or SCREENload or KBload (which serves no purpose) with Memory's load,
	// according the address we were given, using this address range table, according to the last
	// two bits in Memory's address (which is made up of 15 bits -  0,1,2,...,13,14):
	// MSB | MSB-1 | Memory Device
	//  0      0        RAM16K
	//  0      1        RAM16K
	//  1      0        Screen
	//  1      1        Keyboard
	
	DMux4Way(in = load, sel =address[13..14], a = RAMload1 , b = RAMload2 , c = SCREENload, d = KBload);
	Or(a = RAMload1, b = RAMload2, out = RAMload);
	
	// The correct device will be set with its load set to 1 or 0 (according to Memory's load), and all the
	// rest to 0 (actually if RAM16K was chosen then Screen's load will be set to 0 and vice versa - Keyboard 
	// load serves no purposes and will be set to 1 only if we try to read from the keyboard address).
	// Both RAM16K and Screen will receive an input, and while one may get an address which makes sense
	// the other will get a supposedly jibrish address: for example, if address is = 010101010101010
	// which is in the range of RAM16K address, then RAM16K address will be           10101010101010
	// and the Screen address will be                                                  0101010101010
	// and then since we disregard Screen's output, we just "probed" that jibrish address (in this case
    // we get a trimmed address out of the original RAM16K address), and we dont send it to Memory's out.
	
	// As you cann see Keyboard will always send its output, but again the DMux will choose if to disregard it
	// or not.
	
	RAM16K(in = in, load = RAMload, address = address[0..13] ,out = RAMout);
	Screen(in = in, load = SCREENload, address = address[0..12], out = SCREENout);
	Keyboard(out = KEYBOARDout);
	
	// we choose to output the correct output according to the given address, using the same table above.
	
	Mux4Way16(a = RAMout, b = RAMout, c = SCREENout, d = KEYBOARDout, sel = address[13..14] ,out = out);
	
}